#code that was altered for server to run the bot

import psycopg2
from urllib.parse import urlparse
result = urlparse("DATABASE_URL")
username = result.username
password = result.password
database = result.path[1:]
hostname = result.hostname
port = result.port

conn = psycopg2.connect(
    database = database,
    user = username,
    password = password,
    host = hostname,
    port = port
)

import random
import telebot
bot = telebot.TeleBot("TOKEN", parse_mode=None)

import threading
import datetime as dt
from datetime import date
from datetime import datetime
from time import sleep

#change timezone
import pytz
tz = pytz.timezone('Singapore')

import math

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id,"Here are some commands to use the features I provide. \n\n/add: Everytime you purchase food, simply log in the food, the amount (in servings) and its expiry date (in DD/MM/YYYY). I’ll help to keep track of it and remind you to consume it before it expires! \nIf you are unsure of servings portions, visit this link: https://www.healthhub.sg/live-healthy/2044/know-your-servings-photo-guide \n\n/consume: Everytime you consume a certain type of food, tell me exactly what you consumed, the amount and I’ll remove it from the list. \n\n/list: This allows you to view a list of all the available food you have at any point in time to prevent buying duplicates. \n\n *IMPORTANT* \nPlease be consistent in entering the food names (eg. if previously /add was used to add an 'apple', when you /consume, 'apple' should be entered instead of 'apples'.")



@bot.message_handler(commands=['start'])
def start(message):
    #for reminder
    cur = conn.cursor()
    cur.execute("SELECT userID FROM users;")
    result = cur.fetchall()
    ids = []
    if result:
        for tupleid in result:
            ids = ids + [tupleid[0]]

    if message.from_user.id not in ids:
        ids.append(message.from_user.id)

        #getting today's date
        sg = datetime.now(tz)
        today = sg.date()

        cur = conn.cursor()
        values = (message.from_user.id, 1, 0, today, 0, 15)
        query = "INSERT INTO users VALUES(%s, %s, %s, %s, %s, %s);"
        cur.execute(query, values)
        conn.commit()
    else:
        cur = conn.cursor()
        cur.execute(f"UPDATE users SET household = 1 WHERE userID = {message.from_user.id};")
        conn.commit()

    reply = bot.send_message(message.from_user.id, "Hello! I’m FoodSaver, I’m here to reduce food wastage. To get started, please state the number of people in your household (eg. 1, 2, 3 etc).")
    bot.register_next_step_handler(reply, nhousehold)



def nhousehold(message):
    #add chatid to database
    userID = message.from_user.id

    try:
        int(message.text)
    except:
        reply = bot.send_message(message.from_user.id, "Please enter a valid number.")
        bot.register_next_step_handler(reply, nhousehold)
    else:
        household_size = int(message.text)

        if household_size <= 0:
            reply = bot.send_message(message.from_user.id, "Please enter a valid number.")
            bot.register_next_step_handler(reply, nhousehold)

        else:
            cur = conn.cursor()
            cur.execute(f"UPDATE users SET household = {household_size} WHERE userID = {message.from_user.id};")
            conn.commit()

            if household_size == 1:
                bot.send_message(message.from_user.id, f"There is {message.text} person in your household. You can start logging in your food. \nType /help to get guidance on how to use the bot.")
            elif household_size > 1:
                bot.send_message(message.from_user.id, f"There are {message.text} people in your household. You can start logging in your food. \nType /help to get guidance on how to use the bot.")



@bot.message_handler(commands=['add'])
def add(message):
    reply = bot.send_message(message.from_user.id, 'Please state the food name, servings and expiry date. \nIf the food name is longer than a word, please use underscore to replace the space. \nEg: bell_pepper 2 19/11/2022')
    bot.register_next_step_handler(reply, add_sql)



# checking for a valid input date
def validDate(date):
    try:
        day, month, year = date.split('/')
    except ValueError:
        isValidDate = False
    else:
        isValidDate = True
        try:
            dt.datetime(int(year), int(month), int(day))
        except ValueError:
            isValidDate = False

        if len(year) != 4:
            isValidDate = False
    return isValidDate



def add_sql(message):
    cur = conn.cursor()
    terms = message.text.split(" ")
    if len(terms) == 3 and not terms[0].isdigit() and terms[1].isdigit() and validDate(terms[2]):
        userID = message.from_user.id
        food_name = (terms[0]).lower() #convert all to lower case
        servings = terms[1]
        expiry_date = terms[2]
        expiry_date = dt.datetime.strptime(expiry_date, "%d/%m/%Y").date()

        #check if the same food (with same expiry date already exists in database)
        cur = conn.cursor()
        checking_query = "SELECT foodID, foodName, servings, expiryDate FROM food WHERE food.foodName = %s AND food.expiryDate = %s AND userID = %s"
        checking_values = (food_name, expiry_date, message.from_user.id)
        cur.execute(checking_query, checking_values)
        data = cur.fetchall()

        if len(data) == 0:
            foodID = random.randint(1000, 9999)
            cur = conn.cursor()
            cur.execute('SELECT foodID FROM food')
            result = cur.fetchall()
            while foodID in result:
                foodID =  random.randint(1000, 9999)
            # INSERT SQL code to add this into our database
            values = (foodID, food_name, servings, expiry_date, userID)
            cur = conn.cursor()
            add_query = "INSERT INTO food VALUES(%s, %s, %s, %s, %s);"
            cur.execute(add_query, values)
            conn.commit()

        else:
            existing_foodID = data[0][0]
            #existing record of food with same expiry date, just add
            total_servings = int(data[0][2]) + int(servings)
            cur = conn.cursor()
            add = f"UPDATE food SET servings = {total_servings} WHERE foodID = {existing_foodID}"
            cur.execute(add)
            conn.commit()

        reply = "This is added to your food stock: \n"
        if servings == "1":
            expiry_date = expiry_date.strftime('%d/%m/%Y')
            reply += f"{food_name} ({servings} serving) expires {expiry_date} \n"
        else:
            expiry_date = expiry_date.strftime('%d/%m/%Y')
            reply += f"{food_name} ({servings} servings) expires {expiry_date} \n"
        bot.send_message(message.from_user.id, reply)
        conn.commit()
    else:
        reply = bot.send_message(message.from_user.id, 'Invalid input! Please follow the specified format. Eg: "Apple 2 15/10/2022"')
        bot.register_next_step_handler(reply, add_sql)



@bot.message_handler(commands=['list'])
def list(message):
    values = [message.from_user.id]
    cur = conn.cursor()
    query = "SELECT foodID, foodName, servings, expiryDate FROM food WHERE userID = %s"
    cur.execute(query, values)
    cursor = cur.fetchall()
    reply = "This is the current food stock you have: \n"
    for row in cursor:
      food_name = row[1]
      servings = row[2]
      expiry_date = row[3]
      expiry_date = expiry_date.strftime('%d/%m/%Y')
      if servings == "1":
        reply += f"{food_name} ({servings} serving) expires {expiry_date} \n"
      else:
        reply += f"{food_name} ({servings} servings) expires {expiry_date} \n"
    bot.send_message(message.from_user.id, reply)



@bot.message_handler(commands=['consume'])
def consume(message):
    reply = bot.send_message(message.from_user.id, 'Please state the food name and servings consumed. \nIf the food name is longer than a word, please use underscore to replace the space. \nEg: bell_pepper 1')
    bot.register_next_step_handler(reply, consume_sql)



def consume_sql(message):
    terms = message.text.split(" ")
    userID = message.from_user.id

    if len(terms) == 2 and not terms[0].isdigit() and terms[1].isdigit():
        food_name = (terms[0]).lower() #convert all to lower case
        servings_consumed = terms[1]

        #update Food SQL
        values = [food_name, userID]
        cur = conn.cursor()
        query = "SELECT foodID, expiryDate FROM food WHERE foodName = %s AND userID = %s"
        cur.execute(query, values)
        food = cur.fetchall()

        if len(food) == 0: # the input food by user isnt in the foodstock
            reply = bot.send_message(message.from_user.id, 'Invalid input! You do not have this in your food stock. Please try again!')
            bot.register_next_step_handler(reply, consume_sql)

        else:
            if len(food) == 1:
                #update the servings of the only row
                earliest_foodID = food[0][0]
            else:
                #choose the one with earlier expiry date
                data = [food_name, userID]
                cur = conn.cursor()
                all_expiry_query = "SELECT foodID, expiryDate FROM food WHERE foodName = %s AND userID = %s"
                cur.execute(all_expiry_query, data)
                all_expiry = cur.fetchall()

                earliest_expiry = all_expiry[0][1]
                food_id_counter = all_expiry[0][0]
                for row in all_expiry:
                    item_expiry = row[1]
                    if (item_expiry - earliest_expiry).days < 0:
                        earliest_expiry = item_expiry
                        food_id_counter = row[0]

                earliest_foodID = food_id_counter
                conn.commit()

            cur = conn.cursor()
            cur.execute(f"SELECT servings FROM food WHERE foodID = {earliest_foodID}")
            servings = cur.fetchall()[0][0]

            servings_left = int(servings) - int(servings_consumed)
            if servings_left < 0:
                reply = bot.send_message(message.from_user.id, 'Your serving input is more than what you have in your food stock! Please try again with the correct number of servings.')
                bot.register_next_step_handler(reply, consume_sql)

            else:
                if servings_left == 0:
                    #delete
                    cur = conn.cursor()
                    cur.execute(f"DELETE FROM food WHERE foodID = {earliest_foodID}")
                    conn.commit()
                else:
                    #update
                    cur = conn.cursor()
                    cur.execute(f"UPDATE food SET servings = {servings_left} WHERE foodID = {earliest_foodID}")
                    conn.commit()


                #update User SQL (servings consumed for the week)
                cur = conn.cursor()
                cur.execute(f"SELECT weeklyServings FROM users WHERE userID = {message.from_user.id}")
                result = cur.fetchall()
                updated_servings = int(result[0][0]) + int(servings_consumed)

                cur = conn.cursor()
                cur.execute(f"UPDATE users SET weeklyServings = {updated_servings} WHERE userID = {message.from_user.id};")
                conn.commit()

                reply = f"This is removed from your food list: \n {food_name} ({servings_consumed} serving(s))\n"
                bot.send_message(message.from_user.id, reply)
    else:
        reply = bot.send_message(message.from_user.id, 'Invalid input! Please follow the specified format. Eg: "Apple 2"')
        bot.register_next_step_handler(reply, consume_sql)



@bot.message_handler(func=lambda message: True)
def unknown(message):
    reply = message.text
    bot.reply_to(message, "Sorry, there is no such command. \nReply /help if you need guidance on how to use this bot.")



def threading_func():
    cur = conn.cursor()
    cur.execute("SELECT userID FROM users;")
    result = cur.fetchall()
    ids = []
    if result:
        for tupleid in result:
            ids = ids + [tupleid[0]]

    while True:
        for id in ids:
            ##### send reminder for soon to be expired food #####
            data = [id]
            cur = conn.cursor()
            expiry_query = "SELECT * FROM food WHERE userID = %s"
            cur.execute(expiry_query, data)
            result = cur.fetchall()
            conn.commit()
            
            #getting today's date
            sg = datetime.now(tz)
            today = sg.date()

            for i in result:
                expiry_date = i[3] #dt.datetime.strptime(i[3], "%d/%m/%Y").date()
                food_name = i[1]
                days_diff = (expiry_date - today).days
                if days_diff == 0:
                    bot.send_message(id, f"Your {food_name} is expiring today! Consume it today, don't let it go to waste.")
                elif days_diff == 1:
                    bot.send_message(id, f"Your {food_name} is expiring in 1 day! Consume it soon!")
                elif days_diff == 3:
                    bot.send_message(id, f"Your {food_name} is expiring in 3 days!")



            ##### send purchase limit message #####
            servings_div_by_days_left = 0
            data = [id]
            cur = conn.cursor()
            food_query = "SELECT * fROM Food WHERE userID = %s"
            cur.execute(food_query, data)
            result = cur.fetchall()
            #cur.close()

            #getting today's date
            sg = datetime.now(tz)
            today = sg.date()

            for i in result:
                expiry_date = dt.datetime.strptime(str(i[3]), "%Y-%m-%d").date()
                days_left = (expiry_date - today).days
                num_servings = int(i[2])

                #if the food expires today, then change it to 1 (1 day left to eat)
                if days_left == 0:
                    days_left = 1
                servings_div_by_days_left += num_servings / days_left

            cur = conn.cursor()
            hh_member_query = "SELECT household FROM users WHERE userID = %s"
            cur.execute(hh_member_query, data)
            num_hh_members_result = cur.fetchall()
            #cur.close()

            cur = conn.cursor()
            user_serving_lim_query = "SELECT servingLimit FROM users WHERE userID = %s"
            cur.execute(user_serving_lim_query, data)
            user_serving_lim_result = cur.fetchall()
            #cur.close()

            if servings_div_by_days_left / int(num_hh_members_result[0][0]) > int(user_serving_lim_result[0][0]):
                bot.send_message(id, "Oops! It seems that you might have bought too much food to be consumed by your household before they expire! Do think twice before buying more food!")



            ##### update weekly consumption #####
            data = [id]

            #getting today's date
            sg = datetime.now(tz)
            today = sg.date()

            cur = conn.cursor()
            reset_date_query = "SELECT startDate FROM users WHERE userID = %s"
            cur.execute(reset_date_query, data)
            result = cur.fetchall()
            stored_date = result[0][0] #dt.datetime.strptime(result[0][0], "%Y-%m-%d").date()
            
            if (today - stored_date).days % 7 == 0 and (today - stored_date).days != 0: #7 days interval since it is a weekly update and not == start date
                cur = conn.cursor()
                weekly_servings_consumed_query = "SELECT weeklyServings FROM users WHERE userID = %s"
                cur.execute(weekly_servings_consumed_query, data)
                weekly_servings_consumed_result = cur.fetchall()
                weekly_servings_consumed = int(weekly_servings_consumed_result[0][0])

                cur = conn.cursor()
                hh_member_query = "SELECT household FROM users WHERE userID = %s"
                cur.execute(hh_member_query, data)
                num_hh_members_result = cur.fetchall()
                num_hh_members = int(num_hh_members_result[0][0])

                user_limit = weekly_servings_consumed / num_hh_members / 7
                rounded_value = math.ceil(user_limit)
                
                #update new limit for this user
                if rounded_value > 0:
                    cur = conn.cursor()
                    cur.execute(f"UPDATE users SET servingLimit = {rounded_value} WHERE userID = {id};")
                    conn.commit()

                #make serving count to be back to 0
                cur = conn.cursor()
                cur.execute(f"UPDATE users SET weeklyServings = 0 WHERE userID = {id};")
                conn.commit()
       
       
       
            ##### checking for expired food #####
            curr_id = [id]

            #getting today's date
            sg = datetime.now(tz)
            today = sg.date()

            cur = conn.cursor()
            query = "SELECT foodID, foodName, servings, expiryDate FROM food WHERE userID = %s"
            cur.execute(query, curr_id)
            cursor = cur.fetchall()

            for row in cursor:
                food_id = row[0]
                food_name = row[1]
                servings = row[2]
                expiry_date = row[3]
                if (expiry_date - today).days < 0: #food expired
                    expiry_date = expiry_date.strftime('%d/%m/%Y')
                    bot.send_message(id, f"Oh no! It seems like you forgot to consume {servings} serving(s) of {food_name} which expired on {expiry_date}. It has been removed from your food stock.")
                    cur.execute(f"DELETE FROM food WHERE foodID = {food_id}")
                    conn.commit()

        sleep(9000)
worker = threading.Thread(target=threading_func, args=())
worker.start()


bot.infinity_polling(timeout=10, long_polling_timeout = 5)
#bot.polling(none_stop=True, interval=0)
