!pip install pyTelegramBotAPI

import sqlite3
conn = sqlite3.connect('foodSaver.db', check_same_thread=False)

conn.execute('''
CREATE TABLE User (
    userID,
    household,
    points
);''')

conn.commit()

conn.execute('''
CREATE TABLE Food (
    foodID,
    foodName,
    servings,
    expiryDate DATE,
    userID
);''')

conn.commit()

import random
import telebot
bot = telebot.TeleBot("TOKEN", parse_mode=None) 

import threading
import datetime as dt
from datetime import date
from time import sleep
delay = 86400 #checks every day (24h)
ids = []

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.from_user.id,"Here are some commands to use the features I provide. \n\n/add: Everytime you purchase food, simply log in the food, the amount (in servings) and its expiry date. I’ll help to keep track of it and remind you to consume it before it expires! \nIf you are unsure of servings portions, visit this link: https://www.healthhub.sg/live-healthy/2044/know-your-servings-photo-guide \n\n/consume: Everytime you consume a certain type of food, tell me exactly what you consumed, the amount and I’ll remove it from the list. \n\n/list: This allows you to view a list of all the available food you have at any point in time to prevent buying duplicates.")

@bot.message_handler(commands=['start'])
def start(message):
    #for reminder
    global ids
    ids.append(message.from_user.id)
    reply = bot.send_message(message.from_user.id, "Hello! I’m FoodSaver, I’m here to reduce food wastage. To get started, please state the number of people in your household (eg. 1, 2, 3 etc).")
    bot.register_next_step_handler(reply, nhousehold)
    
def nhousehold(message):
    #add chatid to database
    userID = message.from_user.id
    
    try: 
        int(message.text)
    except:
        bot.send_message(message.from_user.id, "Please enter a valid number. Reply /start to start again.")
    else:
        household_size = int(message.text)
        values = (userID, household_size, 0)
        query = "INSERT INTO User VALUES(?, ?, ?);"
        conn.execute(query, values)
    
        if household_size == 1:
            bot.send_message(message.from_user.id, f"There is {message.text} person in your household.")
        elif household_size > 1:
            bot.send_message(message.from_user.id, f"There are {message.text} people in your household.")
    

@bot.message_handler(commands=['add'])
def add(message):
    reply = bot.send_message(message.from_user.id, 'Please state the food name, servings and expiry date.')
    bot.register_next_step_handler(reply, add_sql)
   
def add_sql(message):
    terms = message.text.split(" ")
    userID = message.from_user.id
    food_name = (terms[0]).lower() #convert all to lower case
    servings = terms[1]
    expiry_date = terms[2]
    foodID = random.randint(1000, 9999)
    while foodID in conn.execute('SELECT foodID FROM Food'):
        foodID =  random.randint(1000, 9999)
    # INSERT SQL code to add this into our database
    values = (foodID, food_name, servings, expiry_date, userID)
    add_query = "INSERT INTO Food VALUES(?, ?, ?, ?, ?);"
    conn.execute(add_query, values)
    reply = f"This is added to your food stock: \n"
    if servings == "1":
        reply += f"{food_name} ({servings} serving) expires {expiry_date} \n" 
    else:
        reply += f"{food_name} ({servings} servings) expires {expiry_date} \n" 
    bot.send_message(message.from_user.id, reply)

@bot.message_handler(commands=['list'])
def list(message):
    values = [message.from_user.id]
    query = "SELECT foodID, foodName, servings, expiryDate FROM Food WHERE userID = ?"
    cursor = conn.execute(query, values)
    reply = "This is the current food stock you have: \n"
    for row in cursor:
      food_name = row[1]
      servings = row[2]
      expiry_date = row[3]
      if servings == "1":
        reply += f"{food_name} ({servings} serving) expires {expiry_date} \n" 
      else:
        reply += f"{food_name} ({servings} servings) expires {expiry_date} \n" 


    #debugging to check household members in database from here
    hh_member_query = "SELECT * FROM User WHERE userID = ?"
    num_hh_members_result = tuple(conn.execute(hh_member_query, [message.from_user.id]))
    
    reply += f"hh mem: {num_hh_members_result[0]}"

    bot.send_message(message.from_user.id, reply)
    #till here



@bot.message_handler(commands=['consume'])
def consume(message):
    reply = bot.send_message(message.from_user.id, 'Please state the food name and servings consumed.')
    bot.register_next_step_handler(reply, consume_sql)

def consume_sql(message):
    terms = message.text.split(" ")
    userID = message.from_user.id
    food_name = (terms[0]).lower() #convert all to lower case
    servings_consumed = terms[1]

    #update SQL 
    values = [food_name, userID] 
    query = "SELECT foodID, expiryDate FROM Food WHERE foodName = ? AND userID = ?"
    food = tuple(conn.execute(query, values))
    if len(food) == 1:
      #update the servings of the only row
      earliest_foodID = food[0][0]
    else:
      #choose the one with earlier expiry date
      data = [food_name, userID] 
      earliest_expiry_query = "SELECT foodID, MIN(expiryDate) FROM Food WHERE foodName = ? AND userID = ?"
      earliest_expiry = tuple(conn.execute(earliest_expiry_query, data))
      earliest_foodID = earliest_expiry[0][0]
      conn.commit()
    
    servings = tuple(conn.execute(f"SELECT servings FROM Food WHERE foodID = {earliest_foodID}"))[0][0]

    servings_left = int(servings) - int(servings_consumed)
    if servings_left == 0:
      #delete
      conn.execute(f"DELETE FROM Food WHERE foodID = {earliest_foodID}")
      conn.commit()
    else:
      #update
      conn.execute(f"UPDATE Food SET servings = {servings_left} WHERE foodID = {earliest_foodID}")
      conn.commit()

    reply = f"This is removed from your food list: \n {food_name} ({servings_consumed} serving(s))\n"
    bot.send_message(message.from_user.id, reply)

def send_reminder():
    global ids
    while True:
        for id in ids:
            data = [id]
            expiry_query = "SELECT * FROM Food WHERE userID = ?"
            result = tuple(conn.execute(expiry_query, data))
            conn.commit()
            today = date.today()
            for i in result:
                expiry_date = dt.datetime.strptime(i[3], "%d/%m/%Y").date()
                food_name = i[1]
                days_diff = (expiry_date - today).days
                if days_diff == 0:
                    bot.send_message(id, f"Your {food_name} is expiring in today! Consume it by today, don't let it go to waste.")
                elif days_diff == 1:
                    bot.send_message(id, f"Your {food_name} is expiring in 1 day! Consume it by soon, don't let it go to waste.")
                elif days_diff == 3:
                    bot.send_message(id, f"Your {food_name} is expiring in 3 days!")
        sleep(delay)


t = threading.Thread(target=send_reminder)
t.start()


def send_purchase_limit_message():
    global ids 
    while True:
        for id in ids:
            # counter to keep track of total servings a user has and the latest expiry date
            num_of_days = 0
            tot_num_of_servings = 0

            data = [id]
            food_query = "SELECT * FROM Food WHERE userID = ?"
            result = tuple(conn.execute(food_query, data))
            
            today = date.today()
            for i in result:
                expiry_date = dt.datetime.strptime(i[3], "%d/%m/%Y").date()
                days_left = (expiry_date - today).days
                num_servings = int(i[2])

                num_of_days = max(num_of_days, days_left)
                tot_num_of_servings += num_servings

            hh_member_query = "SELECT household FROM User WHERE userID = ?"
            num_hh_members_result = conn.execute(hh_member_query, data)
            
            print(tot_num_of_servings / num_of_days)
            if tot_num_of_servings / num_of_days > 12 * int(num_hh_members_result[0][1]):
                bot.send_message(id, "Oops! It seems that you might have bought too much food to be consumed by your household before they expire! Do think twice before buying more food!")
        sleep(10)

ttt = threading.Thread(target=send_purchase_limit_message)
ttt.start()


bot.polling(none_stop=True, interval=0)
